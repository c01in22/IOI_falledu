#include <bits/stdc++.h>
#define INF 1e18
typedef long long ll;
using namespace std;

ll n, a[60][60], dist[60], vst[60], dp[60];
vector <ll> adj[60];
queue <ll> qu;

void init(){
    for(ll i = 0; i < 60; i++) dist[i] = INF, vst[i] = 0, dp[i] = INF;
    dp[2] = 0, dp[3] = 1, dp[4] = 2;
}

void bfs(ll st){
    vst[st] = 1, dist[st] = 0;
    qu.push(st);
    while(!qu.empty()){
        ll cur = qu.front(); qu.pop();
        for(ll i = 0; i < adj[cur].size(); i++){
            if(!vst[adj[cur][i]]){
                dist[adj[cur][i]] = min(dist[adj[cur][i]], dist[cur] + 1);
                vst[adj[cur][i]] = 1;
                qu.push(adj[cur][i]);
            }
        }
    }
}

void f(){
    for(ll i = 5; i <= 60; i++){
        dp[i] = dp[i - i/3] + 1;
    }
    /*
    for(ll i = 1; i <= 10; i++) cout << dp[i] << ' ';
    cout << '\n';
    */
}

int main(){
    init(); f();
    cin >> n;
    for(ll i = 0; i < n; i++){
        string s; cin >> s;
        for(ll j = 0; j < s.size(); j++)
            if(s[j] == '1') adj[i+1].push_back(j+1);
    }
    bfs(1);
    /*
    for(ll i = 2; i <= 14; i++ ) cout << dist[i] <<  ' ';
    cout << '\n';
    */
    if(dist[2] == INF) cout << -1;
    else cout << dp[dist[2]+1];
    return 0;
}
